name: Code quality Analysis with SonarQube

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest

    services:
      sonarqube:
        image: sonarqube:10.3-community
        ports:
          - 9000:9000
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: true
        options: >-
          --health-cmd="curl -f http://localhost:9000/api/system/status | grep -q '\"status\":\"UP\"' || exit 1"
          --health-interval=30s
          --health-timeout=10s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for SonarQube to be ready
        run: |
          echo "Waiting for SonarQube to start..."
          timeout 300 bash -c 'until curl -f http://localhost:9000/api/system/status; do sleep 5; done'
          echo "SonarQube is ready!"

      - name: Create SonarQube project
        run: |
          # Créer le projet dans SonarQube
          curl -u admin:admin -X POST \
            "http://localhost:9000/api/projects/create" \
            -d "name=${{ github.event.repository.name }}" \
            -d "project=${{ github.repository_owner }}_${{ github.event.repository.name }}"
          
          # Générer un token pour l'analyse
          TOKEN=$(curl -u admin:admin -X POST \
            "http://localhost:9000/api/user_tokens/generate" \
            -d "name=github-actions" | jq -r '.token')
          
          echo "SONAR_TOKEN=$TOKEN" >> $GITHUB_ENV

      - name: Install SonarQube Scanner
        run: |
          wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip -q sonar-scanner-cli-5.0.1.3006-linux.zip
          echo "$PWD/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      - name: Run SonarQube Scanner
        run: |
          sonar-scanner \
            -Dsonar.projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }} \
            -Dsonar.projectName=${{ github.event.repository.name }} \
            -Dsonar.sources=src \
            -Dsonar.tests=src \
            -Dsonar.test.inclusions="**/*.test.js,**/*.spec.js,**/*.test.ts,**/*.spec.ts" \
            -Dsonar.exclusions="node_modules/**,build/**,dist/**,coverage/**" \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.eslint.reportPaths=eslint-report.json \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.login=${{ env.SONAR_TOKEN }}

      - name: Quality Gate Check
        run: |
          # Attendre que l'analyse soit terminée
          sleep 30
          
          # Vérifier le Quality Gate
          QUALITY_GATE=$(curl -s -u admin:admin \
            "http://localhost:9000/api/qualitygates/project_status?projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }}" \
            | jq -r '.projectStatus.status')
          
          echo "Quality Gate Status: $QUALITY_GATE"
          
          if [ "$QUALITY_GATE" != "OK" ]; then
            echo "Quality Gate failed!"
            exit 1
          else
            echo "Quality Gate passed!"
          fi
