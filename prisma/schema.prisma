generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

model Utilisateur {
  id                      String         @id @default(cuid())
  nom                     String
  prenom                  String
  email                   String         @unique
  password                String
  telephone               String
  role                    Role
  createdAt               DateTime       @default(now())
  entreprise_id           String?
  entreprise              Entreprise?    @relation(fields: [entreprise_id], references: [id])
  interventionsClient     Intervention[] @relation("ClientInterventions")
  interventionsTechnicien Intervention[] @relation("TechnicienInterventions")
  zone                    Zone?
}

enum Role {
  SUPER_ADMIN
  ADMIN
  TECHNICIEN
  CLIENT
}

model Entreprise {
  id                 String        @id @default(cuid())
  nom                String
  adresse            String
  sous_domaine       String
  logo               String
  couleur_principale String
  utilisateurs       Utilisateur[]
}









model Forfait_Intervention {
  id              String       @id @default(cuid())
  id_forfait      String
  id_intervention String
  prix            Float
  duree           Int
  forfait         Forfait      @relation(fields: [id_forfait], references: [id])
  intervention    Intervention @relation(fields: [id_intervention], references: [id])
}

model Forfait {
  id                    String                 @id @default(cuid())
  titre                 String
  prix                  Float
  description           String
  type                  String
  categorie_velo        String
  duree                 String
  formatted_duree       Int
  forfait_interventions Forfait_Intervention[]
}

model Zone {
  id            String         @id @default(cuid())
  nom           String
  polygone      Json
  color         String
  interventions Intervention[]
  // Single assigned technician per zone
  technicien_id String?        @unique
  technicien    Utilisateur?   @relation(fields: [technicien_id], references: [id], onDelete: SetNull)
}
model Intervention {
  id            String                 @id @default(cuid())
  debut         DateTime
  fin           DateTime
  adresse       String?
  statut        InterventionStatut
  client_id     String?
  client        Utilisateur?            @relation("ClientInterventions", fields: [client_id], references: [id])
  technicien_id String
  technicien    Utilisateur            @relation("TechnicienInterventions", fields: [technicien_id], references: [id])
  zone_id       String
  zone          Zone                   @relation(fields: [zone_id], references: [id])
  detail        String?
  forfait_interventions Forfait_Intervention[]
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
}



enum InterventionStatut {
  UNPLANNED
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
